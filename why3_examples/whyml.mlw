module WhyMLExamples

use import int.Int
use import ref.Ref

(* WhyML function *)
let add (x:int) (y: int) (z:int): int = x + y + z

(* procedural, imperative programming style *)
let addp (x: ref int) (y: ref int) (z:ref int) (r: ref int): unit
=
 r := !x + !y + !z;
 ()

(* if-then-else example *)
let cond (x: ref int) (y: ref int) (z: ref int): unit
=

 if (!x = 10) then (
  x := !x + 1;
  y := 0
 )
 else (
  x := !x - 1;
  y := 1
 );

 z := 7;
 ()

(* break statement = throw an exception *)
exception Break unit
 
(* loop example *)
let looping (x: ref int): unit
=
 x := 0;

 try
  loop
  (* that is already the specification *)
  invariant { 0 <= !x <= 10 }
  variant { 10 - !x }
  (* begin loop *)
   if (!x = 10) then raise Break;
   x := !x + 1 
  end (* loop *)
 with Break -> ()
 end (* try block *) ;

 ()


end
